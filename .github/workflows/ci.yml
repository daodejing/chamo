name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend unit tests
        run: pnpm test
        env:
          NODE_ENV: test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: coverage/
          retention-days: 7

  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend unit tests
        working-directory: ./apps/backend
        run: pnpm test
        env:
          NODE_ENV: test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: apps/backend/coverage/
          retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ourchat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        working-directory: ./apps/backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/ourchat_test
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy

      - name: Run integration tests
        working-directory: ./apps/backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/ourchat_test
          JWT_SECRET: test-secret-key
          REFRESH_TOKEN_SECRET: test-refresh-secret
          NODE_ENV: test
        run: pnpm test:integration

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: apps/backend/coverage/
          retention-days: 7

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Start services with Docker Compose
        run: docker compose up -d
        env:
          COMPOSE_FILE: docker-compose.yml

      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:4000/graphql > /dev/null 2>&1; do sleep 2; done'
          echo "Backend is ready!"

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Upload Playwright trace
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/
          retention-days: 7

      - name: Cleanup services
        if: always()
        run: docker compose down -v

  # Build Validation
  build-check:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build
        env:
          NEXT_PUBLIC_GRAPHQL_HTTP_URL: https://staging-api.example.com/graphql
          NEXT_PUBLIC_GRAPHQL_WS_URL: wss://staging-api.example.com/graphql

      - name: Build backend
        working-directory: ./apps/backend
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            out/
            apps/backend/dist/
          retention-days: 3

  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type check
        run: pnpm type-check

  # Summary Job - Required for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      - frontend-unit-tests
      - backend-unit-tests
      - integration-tests
      - e2e-tests
      - build-check
      - lint-and-typecheck
    if: always()

    steps:
      - name: Check job results
        env:
          FRONTEND_RESULT: ${{ needs.frontend-unit-tests.result }}
          BACKEND_RESULT: ${{ needs.backend-unit-tests.result }}
          INTEGRATION_RESULT: ${{ needs.integration-tests.result }}
          E2E_RESULT: ${{ needs.e2e-tests.result }}
          BUILD_RESULT: ${{ needs.build-check.result }}
          LINT_RESULT: ${{ needs.lint-and-typecheck.result }}
        run: |
          echo "Frontend Unit Tests: $FRONTEND_RESULT"
          echo "Backend Unit Tests: $BACKEND_RESULT"
          echo "Integration Tests: $INTEGRATION_RESULT"
          echo "E2E Tests: $E2E_RESULT"
          echo "Build Check: $BUILD_RESULT"
          echo "Lint & Type Check: $LINT_RESULT"

          if [ "$FRONTEND_RESULT" != "success" ] || \
             [ "$BACKEND_RESULT" != "success" ] || \
             [ "$INTEGRATION_RESULT" != "success" ] || \
             [ "$E2E_RESULT" != "success" ] || \
             [ "$BUILD_RESULT" != "success" ] || \
             [ "$LINT_RESULT" != "success" ]; then
            echo "❌ CI failed - one or more checks did not pass"
            exit 1
          fi
          echo "✅ All CI checks passed successfully!"
