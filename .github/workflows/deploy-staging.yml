name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

# Prevent concurrent deployments
concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  # Deploy Frontend to Cloudflare Pages
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend for staging
        run: pnpm build
        env:
          NEXT_PUBLIC_GRAPHQL_HTTP_URL: ${{ secrets.STAGING_GRAPHQL_HTTP_URL }}
          NEXT_PUBLIC_GRAPHQL_WS_URL: ${{ secrets.STAGING_GRAPHQL_WS_URL }}
          NEXT_PUBLIC_GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy out --project-name=ourchat-staging

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          DEPLOYMENT_URL: ${{ secrets.STAGING_FRONTEND_URL }}
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Frontend deployed to staging: ${deploymentUrl}`
            })

  # Deploy Backend to Render
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        working-directory: ./apps/backend
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy

      - name: Trigger Render deployment
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          response=$(curl -X POST "$RENDER_DEPLOY_HOOK_URL" -w "%{http_code}" -o /dev/null -s)
          if [ "$response" -eq 200 ] || [ "$response" -eq 201 ]; then
            echo "‚úÖ Render deployment triggered successfully"
          else
            echo "‚ùå Failed to trigger Render deployment (HTTP $response)"
            exit 1
          fi

      - name: Wait for backend deployment
        env:
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_URL }}
        run: |
          echo "Waiting for backend to be ready (may take 30-60s for cold start)..."
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s "$BACKEND_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Backend is ready!"
              exit 0
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - waiting..."
            sleep 10
          done
          echo "‚ùå Backend failed to become ready after $max_attempts attempts"
          exit 1

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    timeout-minutes: 5

    steps:
      - name: Check Frontend Health
        env:
          FRONTEND_URL: ${{ secrets.STAGING_FRONTEND_URL }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Frontend is accessible (HTTP $response)"
          else
            echo "‚ùå Frontend health check failed (HTTP $response)"
            exit 1
          fi

      - name: Check Backend Health
        env:
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_URL }}
        run: |
          response=$(curl -s "$BACKEND_URL/health")
          echo "Backend health response: $response"

          # Check if response contains "ok" or "healthy" status
          if echo "$response" | grep -q -E '"status":"(ok|healthy)"'; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå Backend health check failed"
            exit 1
          fi

      - name: Check Database Connectivity
        env:
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_URL }}
        run: |
          response=$(curl -s "$BACKEND_URL/health")

          # Check if database field exists and is true/connected
          if echo "$response" | grep -q -E '"database":(true|"connected")'; then
            echo "‚úÖ Database connectivity verified"
          else
            echo "‚ö†Ô∏è  Database connectivity could not be verified"
            echo "Response: $response"
            # Don't fail deployment for database check
          fi

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, health-check]
    if: always()

    steps:
      - name: Summary
        env:
          FRONTEND_RESULT: ${{ needs.deploy-frontend.result }}
          BACKEND_RESULT: ${{ needs.deploy-backend.result }}
          HEALTH_RESULT: ${{ needs.health-check.result }}
          FRONTEND_URL: ${{ secrets.STAGING_FRONTEND_URL }}
          BACKEND_URL: ${{ secrets.STAGING_BACKEND_URL }}
        run: |
          echo "## üöÄ Staging Deployment Summary"
          echo ""
          echo "Frontend Deployment: $FRONTEND_RESULT"
          echo "Backend Deployment: $BACKEND_RESULT"
          echo "Health Check: $HEALTH_RESULT"
          echo ""
          echo "### URLs"
          echo "Frontend: $FRONTEND_URL"
          echo "Backend: $BACKEND_URL"
          echo ""

          if [ "$FRONTEND_RESULT" == "success" ] && [ "$BACKEND_RESULT" == "success" ] && [ "$HEALTH_RESULT" == "success" ]; then
            echo "‚úÖ Staging deployment successful!"
            exit 0
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

      - name: Create deployment issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Staging Deployment Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `Staging deployment failed at ${new Date().toISOString()}\n\nWorkflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n@${context.actor} please investigate.`,
              labels: ['deployment', 'staging', 'ci-cd']
            });
            console.log(`Created issue #${issue.data.number}`);
